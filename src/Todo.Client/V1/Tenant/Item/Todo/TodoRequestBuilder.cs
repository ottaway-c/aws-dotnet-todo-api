// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
using Todo.Client.Models;
using Todo.Client.V1.Tenant.Item.Todo.Item;
namespace Todo.Client.V1.Tenant.Item.Todo
{
    /// <summary>
    /// Builds and executes requests for operations under \v1\tenant\{tenantId}\todo
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.18.0")]
    public partial class TodoRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the Todo.Client.v1.tenant.item.todo.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        /// <returns>A <see cref="global::Todo.Client.V1.Tenant.Item.Todo.Item.WithTodoItemItemRequestBuilder"/></returns>
        public global::Todo.Client.V1.Tenant.Item.Todo.Item.WithTodoItemItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("todoItemId", position);
                return new global::Todo.Client.V1.Tenant.Item.Todo.Item.WithTodoItemItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Todo.Client.V1.Tenant.Item.Todo.TodoRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TodoRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v1/tenant/{tenantId}/todo{?isCompleted*,limit*,paginationToken*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Todo.Client.V1.Tenant.Item.Todo.TodoRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TodoRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v1/tenant/{tenantId}/todo{?isCompleted*,limit*,paginationToken*}", rawUrl)
        {
        }
        /// <summary>
        /// List and filter TodoItems
        /// </summary>
        /// <returns>A <see cref="global::Todo.Client.Models.ListTodoItemsResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Todo.Client.Models.ErrorResponse">When receiving a 400 status code</exception>
        /// <exception cref="global::Todo.Client.Models.ApiErrorResponse">When receiving a 500 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Todo.Client.Models.ListTodoItemsResponse?> GetAsync(Action<RequestConfiguration<global::Todo.Client.V1.Tenant.Item.Todo.TodoRequestBuilder.TodoRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Todo.Client.Models.ListTodoItemsResponse> GetAsync(Action<RequestConfiguration<global::Todo.Client.V1.Tenant.Item.Todo.TodoRequestBuilder.TodoRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Todo.Client.Models.ErrorResponse.CreateFromDiscriminatorValue },
                { "500", global::Todo.Client.Models.ApiErrorResponse.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Todo.Client.Models.ListTodoItemsResponse>(requestInfo, global::Todo.Client.Models.ListTodoItemsResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Create a new TodoItem
        /// </summary>
        /// <returns>A <see cref="global::Todo.Client.Models.CreateTodoItemResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Todo.Client.Models.ErrorResponse">When receiving a 400 status code</exception>
        /// <exception cref="global::Todo.Client.Models.ApiErrorResponse">When receiving a 500 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Todo.Client.Models.CreateTodoItemResponse?> PostAsync(global::Todo.Client.Models.CreateTodoItemRequest body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Todo.Client.Models.CreateTodoItemResponse> PostAsync(global::Todo.Client.Models.CreateTodoItemRequest body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Todo.Client.Models.ErrorResponse.CreateFromDiscriminatorValue },
                { "500", global::Todo.Client.Models.ApiErrorResponse.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Todo.Client.Models.CreateTodoItemResponse>(requestInfo, global::Todo.Client.Models.CreateTodoItemResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// List and filter TodoItems
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Todo.Client.V1.Tenant.Item.Todo.TodoRequestBuilder.TodoRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Todo.Client.V1.Tenant.Item.Todo.TodoRequestBuilder.TodoRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Create a new TodoItem
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::Todo.Client.Models.CreateTodoItemRequest body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::Todo.Client.Models.CreateTodoItemRequest body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Todo.Client.V1.Tenant.Item.Todo.TodoRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Todo.Client.V1.Tenant.Item.Todo.TodoRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Todo.Client.V1.Tenant.Item.Todo.TodoRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// List and filter TodoItems
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.18.0")]
        public partial class TodoRequestBuilderGetQueryParameters 
        {
            [QueryParameter("isCompleted")]
            public bool? IsCompleted { get; set; }
            [QueryParameter("limit")]
            public int? Limit { get; set; }
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("paginationToken")]
            public string? PaginationToken { get; set; }
#nullable restore
#else
            [QueryParameter("paginationToken")]
            public string PaginationToken { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.18.0")]
        public partial class TodoRequestBuilderGetRequestConfiguration : RequestConfiguration<global::Todo.Client.V1.Tenant.Item.Todo.TodoRequestBuilder.TodoRequestBuilderGetQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.18.0")]
        public partial class TodoRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Todo.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.18.0")]
    #pragma warning disable CS1591
    public partial class TodoItemDto : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The createdDate property</summary>
        public DateTimeOffset? CreatedDate { get; set; }
        /// <summary>The idempotencyToken property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? IdempotencyToken { get; set; }
#nullable restore
#else
        public string IdempotencyToken { get; set; }
#endif
        /// <summary>The isCompleted property</summary>
        public bool? IsCompleted { get; set; }
        /// <summary>The notes property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Notes { get; set; }
#nullable restore
#else
        public string Notes { get; set; }
#endif
        /// <summary>The tenantId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TenantId { get; set; }
#nullable restore
#else
        public string TenantId { get; set; }
#endif
        /// <summary>The title property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Title { get; set; }
#nullable restore
#else
        public string Title { get; set; }
#endif
        /// <summary>The todoItemId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TodoItemId { get; set; }
#nullable restore
#else
        public string TodoItemId { get; set; }
#endif
        /// <summary>The updatedDate property</summary>
        public DateTimeOffset? UpdatedDate { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Todo.Client.Models.TodoItemDto"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Todo.Client.Models.TodoItemDto CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Todo.Client.Models.TodoItemDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "createdDate", n => { CreatedDate = n.GetDateTimeOffsetValue(); } },
                { "idempotencyToken", n => { IdempotencyToken = n.GetStringValue(); } },
                { "isCompleted", n => { IsCompleted = n.GetBoolValue(); } },
                { "notes", n => { Notes = n.GetStringValue(); } },
                { "tenantId", n => { TenantId = n.GetStringValue(); } },
                { "title", n => { Title = n.GetStringValue(); } },
                { "todoItemId", n => { TodoItemId = n.GetStringValue(); } },
                { "updatedDate", n => { UpdatedDate = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDateTimeOffsetValue("createdDate", CreatedDate);
            writer.WriteStringValue("idempotencyToken", IdempotencyToken);
            writer.WriteBoolValue("isCompleted", IsCompleted);
            writer.WriteStringValue("notes", Notes);
            writer.WriteStringValue("tenantId", TenantId);
            writer.WriteStringValue("title", Title);
            writer.WriteStringValue("todoItemId", TodoItemId);
            writer.WriteDateTimeOffsetValue("updatedDate", UpdatedDate);
        }
    }
}
#pragma warning restore CS0618

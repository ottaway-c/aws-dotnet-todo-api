// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System;
namespace Todo.Client.Models
{
    /// <summary>
    /// the dto used to send an error response to the client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.18.0")]
    public partial class ErrorResponse : ApiException, IParsable
    {
        /// <summary>the collection of errors for the current context</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Todo.Client.Models.ErrorResponse_errors? Errors { get; set; }
#nullable restore
#else
        public global::Todo.Client.Models.ErrorResponse_errors Errors { get; set; }
#endif
        /// <summary>The primary error message.</summary>
        public override string Message { get => MessageEscaped ?? string.Empty; }
        /// <summary>the message for the error response</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MessageEscaped { get; set; }
#nullable restore
#else
        public string MessageEscaped { get; set; }
#endif
        /// <summary>the http status code sent to the client. default is 400.</summary>
        public int? StatusCode { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Todo.Client.Models.ErrorResponse"/> and sets the default values.
        /// </summary>
        public ErrorResponse()
        {
            MessageEscaped = "One or more errors occurred!";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Todo.Client.Models.ErrorResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Todo.Client.Models.ErrorResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Todo.Client.Models.ErrorResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "errors", n => { Errors = n.GetObjectValue<global::Todo.Client.Models.ErrorResponse_errors>(global::Todo.Client.Models.ErrorResponse_errors.CreateFromDiscriminatorValue); } },
                { "message", n => { MessageEscaped = n.GetStringValue(); } },
                { "statusCode", n => { StatusCode = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Todo.Client.Models.ErrorResponse_errors>("errors", Errors);
            writer.WriteStringValue("message", MessageEscaped);
            writer.WriteIntValue("statusCode", StatusCode);
        }
    }
}
#pragma warning restore CS0618
